"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@aspect_rules_js//js:npm_import.bzl", "translate_package_lock")
load("//jest/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")

load("//jest/private:cli_repositories.bzl", _cli_repositories = "npm_repositories")

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for jest toolchain"
_ATTRS = {
    "jest_version": attr.string(mandatory = True, doc = "FIXME: does nothing??", values = ["27.5.1"]),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _jest_repo_impl(repository_ctx):
    # url = "https://github.com/someorg/someproject/releases/download/v{0}/jest-{1}.zip".format(
    #     repository_ctx.attr.jest_version,
    #     repository_ctx.attr.platform,
    # )
    # repository_ctx.download_and_extract(
    #     url = url,
    #     integrity = TOOL_VERSIONS[repository_ctx.attr.jest_version][repository_ctx.attr.platform],
    # )
    build_content = """#Generated by jest/repositories.bzl
load("@aspect_rules_jest//jest:toolchain.bzl", "jest_toolchain")
jest_toolchain(name = "jest_toolchain", target_tool = select({
        "@bazel_tools//src/conditions:host_windows": "jest_tool.exe",
        "//conditions:default": "jest_tool",
    }),
)
"""

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

jest_repositories = repository_rule(
    _jest_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def jest_register_toolchains(name, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "jest_linux_amd64" -
      this repository is lazily fetched when node is needed for that platform.
    - TODO: create a convenience repository for the host platform like "jest_host"
    - create a repository exposing toolchains for each platform like "jest_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "jest1_14"
        **kwargs: passed to each node_repositories call
    """
    for platform in PLATFORMS.keys():
        jest_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )

    # See comments at the top of /jest/private/cli_repositories.bzl
    # This is used to generate code in this repo, but otherwise unused
    # at runtime or by users directly.
    translate_package_lock(
        name = "jest_cli",
        package_lock = "@aspect_rules_jest//jest/private:package-lock.json",
    )

    _cli_repositories()
